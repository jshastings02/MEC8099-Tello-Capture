import socket  import time  import threading  import cv2  import keyboard  # Detecting spacebar press    # IP addresses for two drones  LEADER_IP = "192.168.10.2"  FOLLOWER_IP = "192.168.10.3"    TELLO_IP = "192.168.10.1"  TELLO_PORT = 8889  TELLO_VIDEO_PORT = 11111  TIMEOUT = 3  # Leader failure detection timeout  EMERGENCY_STOP = False  FAILURE_MODE = False  # Simulating leader failure    # Create UDP sockets  sock_leader = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  sock_leader.bind((LEADER_IP, TELLO_PORT))    sock_follower = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  sock_follower.bind((FOLLOWER_IP, TELLO_PORT))      def send_command(sock, command):      print(f"[COMMAND] Sending: {command}")      sock.sendto(command.encode(), (TELLO_IP, TELLO_PORT))      def mimic_leader(command, delay=0.5):      print(f"[MIMIC] Follower mimicking leader: {command}")      time.sleep(delay)      send_command(sock_follower, command)      # Display camera feed from the leader drone  def stream_video():      cap = cv2.VideoCapture(f"udp://@0.0.0.0:{TELLO_VIDEO_PORT}")      if not cap.isOpened():          print("Failed to open video stream")          return        while True:          ret, frame = cap.read()          if not ret:              print("Failed to receive video frame")              break            cv2.imshow("Tello Leader Camera", frame)          if cv2.waitKey(1) & 0xFF == ord('q'):              break        cap.release()      cv2.destroyAllWindows()      def send_heartbeat():      global FAILURE_MODE      while not EMERGENCY_STOP:          if not FAILURE_MODE:              sock_leader.sendto(b"heartbeat", (FOLLOWER_IP, TELLO_PORT))              print("[HEARTBEAT] Leader is alive.")          time.sleep(3)      def listen_for_leader():      global LEADER_IP, FOLLOWER_IP      sock_follower.settimeout(TIMEOUT)      last_received = time.time()        while not EMERGENCY_STOP:          try:              data, _ = sock_follower.recvfrom(1024)              if data.decode("utf-8").strip() == "heartbeat":                  print("[HEARTBEAT] Leader is alive.")                  last_received = time.time()          except socket.timeout:              if time.time() - last_received > TIMEOUT:                  print("[WARNING] Leader unresponsive! Switching leader...")                  become_new_leader()                  break      def become_new_leader():      global LEADER_IP, FOLLOWER_IP, FAILURE_MODE      LEADER_IP, FOLLOWER_IP = FOLLOWER_IP, LEADER_IP  # Swap roles      FAILURE_MODE = False  # Reset failure mode      print(f"[INFO] New leader is now {LEADER_IP}")      send_commands_as_leader()      def send_commands_as_leader():      print("[TRAJECTORY] New leader executing trajectory")      send_command(sock_leader, "up 50")      mimic_leader("up 50")      time.sleep(3)        send_command(sock_leader, "forward 100")      mimic_leader("forward 100")      time.sleep(5)      def emergency_stop(_):      global EMERGENCY_STOP      print("\n[EMERGENCY] Spacebar pressed! Landing both drones...")      EMERGENCY_STOP = True      send_command(sock_leader, "land")      send_command(sock_follower, "land")      sock_leader.close()      sock_follower.close()      print("[EMERGENCY] All drones landed. Exiting.")      exit()      # Attach emergency stop handler  keyboard.on_press_key('space', emergency_stop)    # === INITIALIZATION ===  print("[INIT] Sending 'command' to both drones")  send_command(sock_leader, "command")  send_command(sock_follower, "command")  time.sleep(2)    print("[INIT] Starting camera stream on leader")  send_command(sock_leader, "streamon")  time.sleep(2)    video_thread = threading.Thread(target=stream_video)  video_thread.start()    # Start heartbeat and listener threads  heartbeat_thread = threading.Thread(target=send_heartbeat)  heartbeat_thread.start()    follower_thread = threading.Thread(target=listen_for_leader)  follower_thread.start()    # === FLIGHT SEQUENCE ===  print("[FLIGHT] Taking off")  send_command(sock_leader, "takeoff")  mimic_leader("takeoff")  time.sleep(8)     send_command(sock_leader, "forward 100")  mimic_leader("forward 100")  time.sleep(5)    send_command(sock_leader, "cw 180")  mimic_leader("cw 180")  time.sleep(5)    send_command(sock_leader, "forward 100")  mimic_leader("forward 100")    # Simulate leader failure  print("[SIMULATION] Simulating leader failure...")  time.sleep(10)  FAILURE_MODE = True    print("[INFO] Leader is hovering. Switching leadership...")  become_new_leader()    # Wrap-up  send_command(sock_leader, "streamoff")  sock_leader.close()  sock_follower.close()  print("[COMPLETE] Execution finished") 
